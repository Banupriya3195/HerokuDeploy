package com.vmi.module.controller;import java.io.UnsupportedEncodingException;import java.security.NoSuchAlgorithmException;import java.text.ParseException;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.FieldError;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import com.vmi.module.model.Applicationproperties;import com.vmi.module.model.CompanyProfile;import com.vmi.module.model.IndentDetails;import com.vmi.module.model.IndentStatus;import com.vmi.module.model.ItemCategory;import com.vmi.module.model.ItemGroup;import com.vmi.module.model.ItemMaster;import com.vmi.module.model.ItemModel;import com.vmi.module.model.Roles;import com.vmi.module.model.Sch;import com.vmi.module.model.UomMaster;import com.vmi.module.model.UserModel;import com.vmi.module.model.Users;import com.vmi.module.model.WareHouseDetails;import com.vmi.module.model.WareHouseMapping;import com.vmi.module.service.ApplicationPropertiesService;import com.vmi.module.service.AuthenticateService;import com.vmi.module.service.CompanyProfileService;import com.vmi.module.service.CountryService;import com.vmi.module.service.DashboardService;import com.vmi.module.service.IndentService;import com.vmi.module.service.ItemMasterService;import com.vmi.module.service.ItemsGroupsService;import com.vmi.module.service.RolesService;import com.vmi.module.service.SupplyChainService;import com.vmi.module.service.UsersService;import com.vmi.module.service.WareHouseMappingService;import com.vmi.module.service.WareHouseService;import com.vmi.module.util.AuthenticationException;import com.vmi.module.util.AuthorizationException;import com.vmi.module.util.ValidationException;@RestController@RequestMapping(value={"/vmi"})@CrossOrigin(origins={"*"})@SuppressWarnings({"unchecked","rawtypes"})public class RestCntrlextends AbstractController {	@Autowired	private AuthenticateService authenticateService;	@Autowired	private CompanyProfileService companyProfileService;	@Autowired	private WareHouseService wareHouseService;	@Autowired	private SupplyChainService supplyChainService;	@Autowired	private ItemMasterService itemMasterService;	@Autowired	private IndentService intendService;	@Autowired	private WareHouseMappingService wareHouseMappingService;	@Autowired	private UsersService usersService;	@Autowired	private RolesService rolesService;	@Autowired	private CountryService countryService;	@Autowired	private ItemsGroupsService itemsGroupsService;	@Autowired	private DashboardService dashboardService;	@Autowired	private ApplicationPropertiesService applicationPropertiesService;	    @RequestMapping(value={"/login"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> userLogin(@RequestBody UserModel userModel, HttpSession session, HttpServletRequest request, HttpServletResponse response) throws NoSuchAlgorithmException, UnsupportedEncodingException {        Map responseMap = this.authenticateService.userlogin(session, userModel);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/logout"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> userLogout(HttpServletRequest request, HttpServletResponse response) throws NoSuchAlgorithmException, UnsupportedEncodingException {        this.authorizeUser(request);        Map responseMap = this.authenticateService.userLogout(request);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/changepassword"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> changepassword(@RequestBody UserModel userModel, HttpSession session, HttpServletRequest request, HttpServletResponse response) throws NoSuchAlgorithmException, UnsupportedEncodingException {        this.authorizeUser(request);        Map responseMap = this.authenticateService.changePassword(userModel, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/company/save"}, method={RequestMethod.POST})    public ResponseEntity<CompanyProfile> saveCompanydetails(@RequestBody CompanyProfile companyObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        Users user = this.authorizeAndRetrieveUser(request);        Map responseMap = this.companyProfileService.saveDetails(companyObj, session, user);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listcompanies"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getAllCompanyDetails(HttpServletRequest request) {        Users user = this.authorizeAndRetrieveUser(request);        Map responseMap = this.companyProfileService.getAllCompanyDetails(user);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/companydelete/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> getCompanyDelete(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.companyProfileService.deleteCompanyById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/companyprofile/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getCompanyDetails(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.companyProfileService.getById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemgroup/save"}, method={RequestMethod.POST})    public ResponseEntity<ItemGroup> saveItemGroupDetails(@RequestBody ItemGroup itemGroupReqObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.saveDetails(itemGroupReqObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemgroup/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getItemGroupId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listitemgroup"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getListitemgroup(HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getListItemGroup();        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemgrpdelete/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> getItemGrpDelete(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.deleteByItemGrpId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemcategory/save"}, method={RequestMethod.POST})    public ResponseEntity<ItemCategory> saveItemCategoryDetails(@RequestBody ItemCategory allRequestParams, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.saveItemCategoryDetails(allRequestParams, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemcategory/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getItemCategoryId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getByItemCategoryId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listitemcategory"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getItemCategoryList(HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getListItemCategory();        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listitemgroupcategory/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getItemGroupCategory(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getItemGroupCategory(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemcategorydelete/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> getItemCategoryDelete(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.deleteByItemCategoryId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemmodel/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveItemModelDetails(@RequestBody ItemModel reqObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.saveItemModelDetails(reqObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemmodel/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getItemModelId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getByItemModelId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listitemCategorymodel/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getByItemCategoryModel(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getByItemCategoryModel(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listitemmodel"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getListItemModel(HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getListItemModel();        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemmodeldelete/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> getItemModelDelete(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.deleteByItemModelId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/uom/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveUomDetails(@RequestBody UomMaster uomMasterObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.saveUomDetails(uomMasterObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/uom/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getUomId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getByUomId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listuom"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getListUom(HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getListUom();        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/uomdelete/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> getUomDelete(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.deleteByUomId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listitemmodeluom/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getByItemModel(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemsGroupsService.getByItemModelUomList(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/warehouse/save"}, method={RequestMethod.POST})    public ResponseEntity<WareHouseDetails> saveWareHousedetails(@RequestBody WareHouseDetails wareHouseObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.wareHouseService.saveDetails(wareHouseObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/warehouse/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getWareHouseId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.wareHouseService.getWareHouseId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/warehouse/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> deleteWarehouseDelete(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.wareHouseService.deleteWarehouseDelete(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/companywarehouse/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getCompanywarehouse(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.wareHouseService.getCompanywarehouse(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/country/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveCountryDetails(@RequestBody Map allRequestParams, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.countryService.saveDetails(allRequestParams, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/country/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getCountryId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.countryService.getById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/childwarehouse/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveSchDetails(@RequestBody Sch reqObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.supplyChainService.saveDetails(reqObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/childwarehouse/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getSchId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.supplyChainService.getById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/childwarehouse/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> getchildwarehouseDelete(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.supplyChainService.deleteBySchId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemmaster/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveItemmasterDetails(@RequestBody ItemMaster reqObj, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.itemMasterService.saveDetails(reqObj);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemmasterBulkUpload/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveItemmasterBulkUpload(@RequestParam(value="file") MultipartFile file, String uomId, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemMasterService.saveItemsBulUpload(file, uomId);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemmaster/imageUpload"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> updateImage(@RequestParam(value="file") MultipartFile file, String itemMasterId, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemMasterService.updateImage(file, itemMasterId);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemmaster/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getItemmasterId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemMasterService.getById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/itemmaster/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> deleteItemmasterId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemMasterService.deleteById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listitemmaster"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getListItemmaster(HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.itemMasterService.getListItemmaster();        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/users/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveUsersDetails(@RequestBody Users reqObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.usersService.saveDetails(reqObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/users/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getUsersId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.usersService.getById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/users/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> getUsersDelete(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.usersService.deleteByUserId(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listusers"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getListUsers(HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.usersService.getListUsers();        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/roles/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveRolesDetails(@RequestBody Roles reqObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.rolesService.saveDetails(reqObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listroles"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getRoles(HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.rolesService.getRoles();        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/wareHouseMapping/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveWareHouseMappingDetails(@RequestBody WareHouseMapping reqObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.wareHouseMappingService.saveDetails(reqObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/wareHouseMapping/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getWareHouseMappingId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.wareHouseMappingService.getById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listwareHouseMapping/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getwareHouseMappingd(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.wareHouseMappingService.getListWareHouseMapping(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/wareHouseMapping/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> getwareHouseMappingDelete(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.wareHouseMappingService.deleteById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/indentfileupload"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> getIndentdetails(@RequestParam(value="file") MultipartFile file, HttpServletRequest request) throws ParseException {        this.authorizeUser(request);        Map responseMap = this.intendService.getIndentFile(file);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/indents/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveIndentDetails(@RequestBody IndentDetails reqObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.intendService.saveDetails(reqObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listindentstatustrack/{indentId}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getIndentstrackList(@PathVariable(value="indentId") String indentId, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.intendService.getListIndentsTrack(indentId);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/indents/{id}"}, method={RequestMethod.DELETE})    public ResponseEntity<Map<String, Object>> getIndentId(@PathVariable(value="id") String id, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.intendService.deleteById(id);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listindents/{type}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getIndentList(@PathVariable(value="type") String type, HttpServletRequest request) {        Users user = this.authorizeAndRetrieveUser(request);        Map responseMap = this.intendService.getListIndents(user, type);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listlatestindents/{statusId}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getIndentList(HttpServletRequest request, @PathVariable(value="statusId") String statusId) {        Users user = this.authorizeAndRetrieveUser(request);        Map responseMap = this.intendService.getLatestListIndents(user, statusId);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listcolourindents/{id}/{colourcode}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getColourIndentList(@PathVariable(value="id") String id, @PathVariable(value="colourcode") String colour, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.intendService.getColourListIndents(id, colour);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/listcolourindents/{id}/{fromdate}/{todate}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getDateRangeIndentList(@PathVariable(value="id") String id, @PathVariable(value="fromdate") String fromdate, @PathVariable(value="todate") String todate, HttpServletRequest request) {        Map responseMap = this.intendService.getDateRangeListIndents(id, fromdate, todate);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/indentsstatus/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveIndentStatus(@RequestBody IndentStatus reqObj, HttpSession session, HttpServletRequest request, HttpServletResponse response) {        this.authorizeUser(request);        Map responseMap = this.intendService.saveDetails(reqObj, session);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/applicationproperties/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> saveProperties(Applicationproperties reqObj, HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.applicationPropertiesService.saveDetails(reqObj);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/stocksummary/{id}"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getStockSummary(HttpServletRequest request, @PathVariable(value="id") String wareHouseId) {        Users user = this.authorizeAndRetrieveUser(request);        Map responseMap = this.dashboardService.getCurrentItemZone(user, wareHouseId);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/indentstatus"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getIndentStatus(HttpServletRequest request) {        this.authorizeUser(request);        Map responseMap = this.intendService.getIndentStatus();        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/dashboardcount"}, method={RequestMethod.GET})    public ResponseEntity<Map<String, Object>> getDashboardCount(HttpServletRequest request) {        Users user = this.authorizeAndRetrieveUser(request);        Map responseMap = this.dashboardService.getDashboardCount(user);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/test/save"}, method={RequestMethod.POST})    public ResponseEntity<Map<String, Object>> test(@RequestParam(value="file") MultipartFile file, HttpServletRequest request) {        Map responseMap = this.itemMasterService.test(file);        return new ResponseEntity((Object)responseMap, HttpStatus.OK);    }    @RequestMapping(value={"/search/{query}/{start}/{count}"}, method={RequestMethod.GET})    public @ResponseBody String getSearch(HttpServletRequest request, @PathVariable(value="query") String query,@PathVariable(value="start") int start,@PathVariable(value="count") int count) {        return dashboardService.getSearch(query,start,count);    }        @ResponseStatus(value=HttpStatus.BAD_REQUEST)    @ExceptionHandler(value={MethodArgumentNotValidException.class})    public Map<String, String> handleValidationExceptions(MethodArgumentNotValidException ex) {        HashMap<String, String> errors = new HashMap<String, String>();        ex.getBindingResult().getAllErrors().forEach(error -> {            String fieldName = ((FieldError)error).getField();            String errorMessage = error.getDefaultMessage();            errors.put(fieldName, errorMessage);        });        return errors;    }    @ExceptionHandler(value={ValidationException.class})    @ResponseStatus(value=HttpStatus.BAD_REQUEST)    public ResponseEntity<List<Error>> handleValidationException(ValidationException validationException) {        return new ResponseEntity((Object)validationException.getErrors(), HttpStatus.BAD_REQUEST);    }    @ExceptionHandler(value={AuthenticationException.class})    @ResponseStatus(value=HttpStatus.UNAUTHORIZED)    public ResponseEntity<List<Error>> handleAuthenticationException(AuthenticationException authenticationException) {        return new ResponseEntity((Object)authenticationException.getErrors(), HttpStatus.UNAUTHORIZED);    }    @ExceptionHandler(value={AuthorizationException.class})    @ResponseStatus(value=HttpStatus.FORBIDDEN)    public ResponseEntity<List<Error>> handleAuthorizationException(AuthorizationException authorizationException) {        return new ResponseEntity((Object)authorizationException.getErrors(), HttpStatus.FORBIDDEN);    }}