package com.vmi.module.service;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DuplicateKeyException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.fasterxml.jackson.databind.DeserializationFeature;import com.fasterxml.jackson.databind.ObjectMapper;import com.vmi.module.model.CompanyProfile;import com.vmi.module.model.Users;import com.vmi.module.model.WareHouseDetails;import com.vmi.module.repo.CompanyDetailsRepo;import com.vmi.module.repo.WareHouseRepo;import com.vmi.module.util.CustomErr;import com.vmi.module.util.Error;import com.vmi.module.util.ValidationException;@Transactional@Service("CompanyProfileService")public class CompanyProfileServiceImpl  implements CompanyProfileService{  ObjectMapper objMapper = new ObjectMapper();  @Autowired  private CompanyDetailsRepo companyDetailsRepo;  @Autowired  private WareHouseRepo wareHouseRepo;  @Autowired  private WareHouseService wareHouseService;     public Map<String, Object> saveDetails(CompanyProfile companyObj, HttpSession paramHttpSession, Users loginUser)  {    Map<String, Object> responseHashMap = new HashMap();    List<Error> errorDetail = new ArrayList();    CompanyProfile companyProfile = null;    try    {      this.objMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);      if (companyObj.getId() != null) {        companyProfile = this.companyDetailsRepo.findById(companyObj.getId());      } else {        companyProfile = null;      }      if (companyProfile != null)      {        companyObj.setCreateDate(companyProfile.getCreateDate());        companyObj.setCreateUser(companyProfile.getCreateUser());        companyProfile = (CompanyProfile)this.objMapper.convertValue(companyObj, CompanyProfile.class);        responseHashMap.put("message", "data updated !!");      }      else      {        companyObj.setId(null);        this.objMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);        companyProfile = (CompanyProfile)this.objMapper.convertValue(companyObj, CompanyProfile.class);      }      companyProfile = (CompanyProfile)this.companyDetailsRepo.save(companyProfile);      if (companyProfile.getWareHouse() != null) {        this.wareHouseService.saveDetails(companyProfile, paramHttpSession);      }      responseHashMap.put("companydetails", companyProfile);    }    catch (DuplicateKeyException e)    {      errorDetail.add(new Error("C007", "Duplicate values of Company Name,Code cant not be allowed"));      throw new ValidationException(errorDetail);    }    catch (Exception e)    {      responseHashMap.put("errorData", new CustomErr("LP - 10003", "Request has invalid data,Please try again"));    }    return responseHashMap;  }    public Map<String, Object> getAllCompanyDetails(Users loginUser)  {    Map<String, Object> responseDataHashMap = new HashMap();    List<CompanyProfile> companyProfileList = null;    if ("ADMIN".equals(loginUser.getRole().getRole())) {      companyProfileList = this.companyDetailsRepo.findByCreateUserOrderByCreateDateDesc(loginUser.getEmpCode());    } else {      companyProfileList = this.companyDetailsRepo.findByCreateUserOrderByCreateDateDesc(loginUser.getCreateBy());    }    if (companyProfileList != null) {      responseDataHashMap.put("companies", companyProfileList);    } else {      responseDataHashMap.put("message", "No data found");    }    return responseDataHashMap;  }    public Map<String, Object> getById(String id)  {    Map<String, Object> responseDataHashMap = new HashMap();    CompanyProfile companyProfileObj = this.companyDetailsRepo.findById(id.trim());    if (companyProfileObj != null)    {      companyProfileObj.setWareHouse(this.wareHouseRepo.findByCompanyProfile(id.trim()));      responseDataHashMap.put("companies", companyProfileObj);    }    else    {      responseDataHashMap.put("message", "No data found");    }    return responseDataHashMap;  }    public Map<String, Object> deleteCompanyById(String id)  {    Map<String, Object> responseHashMap = new HashMap();    CompanyProfile companyProfileObj = this.companyDetailsRepo.findById(id.trim());    if (companyProfileObj != null)    {      this.companyDetailsRepo.delete(companyProfileObj);      List<WareHouseDetails> wareHouse = this.wareHouseRepo.findByCompanyProfile(id.trim());      if (wareHouse != null) {        this.wareHouseRepo.delete(wareHouse);      }      responseHashMap.put("message", "data deleted");    }    else    {      responseHashMap.put("message", "No data found");    }    return responseHashMap;  }}