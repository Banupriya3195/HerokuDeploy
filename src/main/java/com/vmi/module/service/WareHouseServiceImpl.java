package com.vmi.module.service;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpSession;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DuplicateKeyException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.fasterxml.jackson.databind.DeserializationFeature;import com.fasterxml.jackson.databind.ObjectMapper;import com.vmi.module.model.CompanyProfile;import com.vmi.module.model.WareHouseDetails;import com.vmi.module.repo.WareHouseRepo;import com.vmi.module.util.CustomErr;import com.vmi.module.util.Error;import com.vmi.module.util.ValidationException;@Transactional@Service("WareHouseService")public class WareHouseServiceImpl  implements WareHouseService{  @Autowired  private WareHouseRepo wareHouseRepo;  ObjectMapper objMapper = new ObjectMapper();  private static final Logger LOGGER = LoggerFactory.getLogger(ItemsGroupServmpl.class);    public Map<String, Object> saveDetails(WareHouseDetails reqObj, HttpSession paramHttpSession)  {    Map<String, Object> responseHashMap = new HashMap();    try    {      this.objMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);      WareHouseDetails wareHouseObj = this.wareHouseRepo.findById(reqObj.getId());      if (wareHouseObj != null)      {        reqObj.setCreateBy(wareHouseObj.getCreateBy());        reqObj.setCreateDate(wareHouseObj.getCreateDate());        wareHouseObj = (WareHouseDetails)this.objMapper.convertValue(reqObj, WareHouseDetails.class);        responseHashMap.put("message", "data updated !!");      }      else      {        wareHouseObj = (WareHouseDetails)this.objMapper.convertValue(reqObj, WareHouseDetails.class);        responseHashMap.put("message", "data inserted !!");      }      wareHouseObj = (WareHouseDetails)this.wareHouseRepo.save(wareHouseObj);      responseHashMap.put("wareHouseDetails", wareHouseObj);    }    catch (Exception e)    {      LOGGER.error("Provider : WareHouseServiceImpl /n saveWareHousedetail : {} /n Exception : ", new Object[] { e });      responseHashMap.put("errorData", new CustomErr("LP - 10003", "Request has invalid data,Please try again"));    }    return responseHashMap;  }    public Map<String, Object> getWareHouseId(String id)  {    Map<String, Object> responseDataHashMap = new HashMap();    WareHouseDetails wareHouseDetailsObj = this.wareHouseRepo.findById(id.trim());    if (wareHouseDetailsObj != null) {      responseDataHashMap.put("wareHouseDetails", wareHouseDetailsObj);    } else {      responseDataHashMap.put("message", "No data found");    }    return responseDataHashMap;  }    public Map<String, Object> deleteWarehouseDelete(String id)  {    Map<String, Object> responseHashMap = new HashMap();    WareHouseDetails wareHouseDetailsObj = this.wareHouseRepo.findById(id.trim());    if (wareHouseDetailsObj != null)    {      this.wareHouseRepo.delete(wareHouseDetailsObj);      responseHashMap.put("message", "data deleted");    }    else    {      responseHashMap.put("message", "No data found");    }    return responseHashMap;  }    public void saveDetails(CompanyProfile companyProfile, HttpSession paramHttpSession)  {    List<WareHouseDetails> wareHouseReqObj = companyProfile.getWareHouse();    List<Error> errorDetail = new ArrayList();    WareHouseDetails wareHouse = null;    for (WareHouseDetails wareHousereq : wareHouseReqObj) {      try      {        this.objMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);        if (wareHousereq.getId() != null) {          wareHouse = this.wareHouseRepo.findById(wareHousereq.getId());        } else {          wareHouse = null;        }        if (wareHouse != null)        {          wareHousereq.setCreateBy(wareHouse.getCreateBy());          wareHousereq.setCreateDate(wareHouse.getCreateDate());          wareHouse = (WareHouseDetails)this.objMapper.convertValue(wareHousereq, WareHouseDetails.class);          wareHouse.setCompanyProfile(companyProfile);        }        else        {          wareHousereq.setId(null);          wareHouse = (WareHouseDetails)this.objMapper.convertValue(wareHousereq, WareHouseDetails.class);          wareHouse.setCompanyProfile(companyProfile);        }        wareHouse = (WareHouseDetails)this.wareHouseRepo.save(wareHouse);      }      catch (DuplicateKeyException e)      {        errorDetail.add(new Error("C007", "Duplicate values of WareHouse Name,Code,Email cant not be allowed"));        throw new ValidationException(errorDetail);      }      catch (Exception e)      {        LOGGER.error("Provider : WareHouseServiceImpl /n saveWareHousedetail : {} /n Exception : ",           new Object[] { e });      }    }  }    public Map<String, Object> getCompanywarehouse(String id)  {    Map<String, Object> responseDataHashMap = new HashMap();    List<WareHouseDetails> wareHouseDetailsObj = this.wareHouseRepo.findByCompanyProfile(id.trim());    if (wareHouseDetailsObj != null) {      responseDataHashMap.put("wareHouse", wareHouseDetailsObj);    } else {      responseDataHashMap.put("message", "No data found");    }    return responseDataHashMap;  }}